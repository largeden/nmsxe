<?xml version="1.0"?>
<!DOCTYPE smi SYSTEM "http://www.ibr.cs.tu-bs.de/projects/nmrg/smi.dtd">

<!-- This module has been generated by smidump 0.4.7. Do not edit. -->

<smi xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:noNamespaceSchemaLocation="http://www.ibr.cs.tu-bs.de/projects/nmrg/smi.xsd">
  <module name="DISMAN-EVENT-MIB" language="SMIv2">
    <organization>  
        IETF Distributed Management Working Group
    </organization>
    <contact>       
        Ramanathan Kavasseri
        Cisco Systems, Inc.
        170 West Tasman Drive,
        San Jose CA 95134-1706.
        Phone: +1 408 526 4527
        Email: ramk@cisco.com
    </contact>
    <description>

        The MIB module for defining event triggers and actions
        for network management purposes.
    </description>
    <revision date="2000-10-16 00:00">
      <description>
          This is the initial version of this MIB.
          Published as RFC 2981
      </description>
    </revision>
    <identity node="dismanEventMIB"/>
  </module>

  <imports>
    <import module="SNMPv2-SMI" name="MODULE-IDENTITY"/>
    <import module="SNMPv2-SMI" name="OBJECT-TYPE"/>
    <import module="SNMPv2-SMI" name="Integer32"/>
    <import module="SNMPv2-SMI" name="Unsigned32"/>
    <import module="SNMPv2-SMI" name="NOTIFICATION-TYPE"/>
    <import module="SNMPv2-SMI" name="Counter32"/>
    <import module="SNMPv2-SMI" name="Gauge32"/>
    <import module="SNMPv2-SMI" name="mib-2"/>

    <import module="SNMPv2-SMI" name="zeroDotZero"/>
    <import module="SNMPv2-TC" name="TEXTUAL-CONVENTION"/>
    <import module="SNMPv2-TC" name="RowStatus"/>
    <import module="SNMPv2-TC" name="TruthValue"/>
    <import module="SNMPv2-CONF" name="MODULE-COMPLIANCE"/>
    <import module="SNMPv2-CONF" name="OBJECT-GROUP"/>
    <import module="SNMPv2-CONF" name="NOTIFICATION-GROUP"/>
    <import module="SNMPv2-MIB" name="sysUpTime"/>
    <import module="SNMP-TARGET-MIB" name="SnmpTagValue"/>

    <import module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>
  </imports>

  <typedefs>
    <typedef name="FailureReason" basetype="Enumeration" status="current">
      <namednumber name="sampleOverrun" number="-6"/>
      <namednumber name="badType" number="-5"/>
      <namednumber name="noResponse" number="-4"/>
      <namednumber name="destinationUnreachable" number="-3"/>

      <namednumber name="badDestination" number="-2"/>
      <namednumber name="localResourceLack" number="-1"/>
      <namednumber name="noError" number="0"/>
      <namednumber name="tooBig" number="1"/>
      <namednumber name="noSuchName" number="2"/>
      <namednumber name="badValue" number="3"/>
      <namednumber name="readOnly" number="4"/>
      <namednumber name="genErr" number="5"/>
      <namednumber name="noAccess" number="6"/>

      <namednumber name="wrongType" number="7"/>
      <namednumber name="wrongLength" number="8"/>
      <namednumber name="wrongEncoding" number="9"/>
      <namednumber name="wrongValue" number="10"/>
      <namednumber name="noCreation" number="11"/>
      <namednumber name="inconsistentValue" number="12"/>
      <namednumber name="resourceUnavailable" number="13"/>
      <namednumber name="commitFailed" number="14"/>
      <namednumber name="undoFailed" number="15"/>

      <namednumber name="authorizationError" number="16"/>
      <namednumber name="notWritable" number="17"/>
      <namednumber name="inconsistentName" number="18"/>
      <description>
          Reasons for failures in an attempt to perform a management
          request.
          
          The first group of errors, numbered less than 0, are related
          to problems in sending the request.  The existence of a
          particular error code here does not imply that all
          implementations are capable of sensing that error and
          
          
          returning that code.
          
          The second group, numbered greater than 0, are copied
          directly from SNMP protocol operations and are intended to
          carry exactly the meanings defined for the protocol as returned
          in an SNMP response.
          
          localResourceLack       some local resource such as memory
                                  lacking or
                                  mteResourceSampleInstanceMaximum
                                  exceeded
          badDestination          unrecognized domain name or otherwise
                                  invalid destination address
          destinationUnreachable  can't get to destination address
          noResponse              no response to SNMP request
          badType                 the data syntax of a retrieved object
                                  as not as expected
          sampleOverrun           another sample attempt occurred before
                                  the previous one completed
      </description>
    </typedef>
  </typedefs>

  <nodes>

    <node name="sysUpTimeInstance" oid="1.3.6.1.2.1.1.3.0">
    </node>
    <node name="dismanEventMIB" oid="1.3.6.1.2.1.88" status="current">
    </node>
    <node name="dismanEventMIBObjects" oid="1.3.6.1.2.1.88.1">
    </node>
    <node name="mteResource" oid="1.3.6.1.2.1.88.1.1">
    </node>
    <scalar name="mteResourceSampleMinimum" oid="1.3.6.1.2.1.88.1.1.1" status="current">

      <syntax>
        <typedef basetype="Integer32">
          <range min="1" max="2147483647"/>
        </typedef>
      </syntax>
      <access>readwrite</access>
      <units>seconds</units>
      <description>

          The minimum mteTriggerFrequency this system will
          accept.  A system may use the larger values of this minimum to
          lessen the impact of constant sampling.  For larger
          sampling intervals the system samples less often and
          suffers less overhead.  This object provides a way to enforce
          such lower overhead for all triggers created after it is
          set.
          
          Unless explicitly resource limited, a system's value for
          this object SHOULD be 1, allowing as small as a 1 second
          interval for ongoing trigger sampling.
          
          Changing this value will not invalidate an existing setting
          of mteTriggerFrequency.
      </description>
    </scalar>
    <scalar name="mteResourceSampleInstanceMaximum" oid="1.3.6.1.2.1.88.1.1.2" status="current">
      <syntax>
        <type module="" name="Unsigned32"/>
      </syntax>
      <access>readwrite</access>
      <units>instances</units>

      <description>
          The maximum number of instance entries this system will
          support for sampling.
          
          These are the entries that maintain state, one for each
          instance of each sampled object as selected by
          mteTriggerValueID.  Note that wildcarded objects result
          in multiple instances of this state.
          
          A value of 0 indicates no preset limit, that is, the limit
          is dynamic based on system operation and resources.
          
          Unless explicitly resource limited, a system's value for
          this object SHOULD be 0.
          
          Changing this value will not eliminate or inhibit existing
          sample state but could prevent allocation of additional state
          information.
      </description>
    </scalar>
    <scalar name="mteResourceSampleInstances" oid="1.3.6.1.2.1.88.1.1.3" status="current">
      <syntax>
        <type module="SNMPv2-SMI" name="Gauge32"/>
      </syntax>
      <access>readonly</access>

      <units>instances</units>
      <description>
          The number of currently active instance entries as
          defined for mteResourceSampleInstanceMaximum.
      </description>
    </scalar>
    <scalar name="mteResourceSampleInstancesHigh" oid="1.3.6.1.2.1.88.1.1.4" status="current">
      <syntax>
        <type module="SNMPv2-SMI" name="Gauge32"/>
      </syntax>

      <access>readonly</access>
      <units>instances</units>
      <description>
          The highest value of mteResourceSampleInstances that has
          occurred since initialization of the management system.
      </description>
    </scalar>
    <scalar name="mteResourceSampleInstanceLacks" oid="1.3.6.1.2.1.88.1.1.5" status="current">
      <syntax>

        <type module="SNMPv2-SMI" name="Counter32"/>
      </syntax>
      <access>readonly</access>
      <units>instances</units>
      <description>
          The number of times this system could not take a new sample
          because that allocation would have exceeded the limit set by
          mteResourceSampleInstanceMaximum.
      </description>
    </scalar>

    <node name="mteTrigger" oid="1.3.6.1.2.1.88.1.2">
    </node>
    <scalar name="mteTriggerFailures" oid="1.3.6.1.2.1.88.1.2.1" status="current">
      <syntax>
        <type module="SNMPv2-SMI" name="Counter32"/>
      </syntax>
      <access>readonly</access>
      <units>failures</units>

      <description>
          The number of times an attempt to check for a trigger
          condition has failed.  This counts individually for each
          attempt in a group of targets or each attempt for a
          
          
          wildcarded object.
      </description>
    </scalar>
    <table name="mteTriggerTable" oid="1.3.6.1.2.1.88.1.2.2" status="current">
      <description>
          A table of management event trigger information.
      </description>
      <row name="mteTriggerEntry" oid="1.3.6.1.2.1.88.1.2.2.1" create="true" status="current">
        <linkage implied="true">

          <index module="DISMAN-EVENT-MIB" name="mteOwner"/>
          <index module="DISMAN-EVENT-MIB" name="mteTriggerName"/>
        </linkage>
        <description>
            Information about a single trigger.  Applications create and
            delete entries using mteTriggerEntryStatus.
        </description>
        <column name="mteOwner" oid="1.3.6.1.2.1.88.1.2.2.1.1" status="current">
          <syntax>
            <typedef basetype="OctetString">

              <parent module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>
              <range min="0" max="32"/>
            </typedef>
          </syntax>
          <access>noaccess</access>
          <description>
              The owner of this entry. The exact semantics of this
              string are subject to the security policy defined by the
              security administrator.
          </description>
        </column>

        <column name="mteTriggerName" oid="1.3.6.1.2.1.88.1.2.2.1.2" status="current">
          <syntax>
            <typedef basetype="OctetString">
              <parent module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>
              <range min="1" max="32"/>
            </typedef>
          </syntax>
          <access>noaccess</access>

          <description>
              A locally-unique, administratively assigned name for the
              trigger within the scope of mteOwner.
          </description>
        </column>
        <column name="mteTriggerComment" oid="1.3.6.1.2.1.88.1.2.2.1.3" status="current">
          <syntax>
            <type module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>
          </syntax>
          <access>readwrite</access>

          <default>""</default>
          <description>
              A description of the trigger's function and use.
          </description>
        </column>
        <column name="mteTriggerTest" oid="1.3.6.1.2.1.88.1.2.2.1.4" status="current">
          <syntax>
            <typedef basetype="Bits">
              <namednumber name="existence" number="0"/>

              <namednumber name="boolean" number="1"/>
              <namednumber name="threshold" number="2"/>
            </typedef>
          </syntax>
          <access>readwrite</access>
          <default>(boolean)</default>
          <description>
              The type of trigger test to perform.  For 'boolean' and
              'threshold'  tests, the object at mteTriggerValueID MUST
              evaluate to an integer, that is, anything that ends up encoded
              for transmission (that is, in BER, not ASN.1) as an integer.
              
              For 'existence', the specific test is as selected by
              mteTriggerExistenceTest.  When an object appears, vanishes
              or changes value, the trigger fires. If the object's
              appearance caused the trigger firing, the object MUST
              vanish before the trigger can be fired again for it, and
              vice versa. If the trigger fired due to a change in the
              object's value, it will be fired again on every successive
              value change for that object.
              
              For 'boolean', the specific test is as selected by
              mteTriggerBooleanTest.  If the test result is true the trigger
              fires.  The trigger will not fire again until the value has
              become false and come back to true.
              
              For 'threshold' the test works as described below for
              
              
              mteTriggerThresholdStartup, mteTriggerThresholdRising, and
              mteTriggerThresholdFalling.
              
              Note that combining 'boolean' and 'threshold' tests on the
              same object may be somewhat redundant.
          </description>

        </column>
        <column name="mteTriggerSampleType" oid="1.3.6.1.2.1.88.1.2.2.1.5" status="current">
          <syntax>
            <typedef basetype="Enumeration">
              <namednumber name="absoluteValue" number="1"/>
              <namednumber name="deltaValue" number="2"/>
            </typedef>
          </syntax>
          <access>readwrite</access>

          <default>absoluteValue</default>
          <description>
              The type of sampling to perform.
              
              An 'absoluteValue' sample requires only a single sample to be
              meaningful, and is exactly the value of the object at
              mteTriggerValueID at the sample time.
              
              A 'deltaValue' requires two samples to be meaningful and is
              thus not available for testing until the second and subsequent
              samples after the object at mteTriggerValueID is first found
              to exist.  It is the difference between the two samples.  For
              unsigned values it is always positive, based on unsigned
              arithmetic.  For signed values it can be positive or negative.
              
              For SNMP counters to be meaningful they should be sampled as a
              'deltaValue'.
              
              For 'deltaValue' mteTriggerDeltaTable contains further
              parameters.
              
              If only 'existence' is set in mteTriggerTest this object has
              no meaning.
          </description>
        </column>
        <column name="mteTriggerValueID" oid="1.3.6.1.2.1.88.1.2.2.1.6" status="current">
          <syntax>
            <type module="" name="ObjectIdentifier"/>
          </syntax>

          <access>readwrite</access>
          <default>0.0</default>
          <description>
              The object identifier of the MIB object to sample to see
              if the trigger should fire.
              
              This may be wildcarded by truncating all or part of the
              instance portion, in which case the value is obtained
              as if with a GetNext function, checking multiple values
              
              
              if they exist.  If such wildcarding is applied,
              mteTriggerValueIDWildcard must be 'true' and if not it must
              be 'false'.
              
              Bad object identifiers or a mismatch between truncating the
              identifier and the value of mteTriggerValueIDWildcard result
              in operation as one would expect when providing the wrong
              identifier to a Get or GetNext operation.  The Get will fail
              or get the wrong object.  The GetNext will indeed get whatever
              is next, proceeding until it runs past the initial part of the
              identifier and perhaps many unintended objects for confusing
              results.  If the value syntax of those objects is not usable,
              that results in a 'badType' error that terminates the scan.
              
              Each instance that fills the wildcard is independent of any
              additional instances, that is, wildcarded objects operate
              as if there were a separate table entry for each instance
              that fills the wildcard without having to actually predict
              all possible instances ahead of time.
          </description>
        </column>
        <column name="mteTriggerValueIDWildcard" oid="1.3.6.1.2.1.88.1.2.2.1.7" status="current">
          <syntax>

            <type module="SNMPv2-TC" name="TruthValue"/>
          </syntax>
          <access>readwrite</access>
          <default>false</default>
          <description>
              Control for whether mteTriggerValueID is to be treated as
              fully-specified or wildcarded, with 'true' indicating wildcard.
          </description>
        </column>

        <column name="mteTriggerTargetTag" oid="1.3.6.1.2.1.88.1.2.2.1.8" status="current">
          <syntax>
            <type module="SNMP-TARGET-MIB" name="SnmpTagValue"/>
          </syntax>
          <access>readwrite</access>
          <default>""</default>
          <description>
              The tag for the target(s) from which to obtain the condition
              for a trigger check.
              
              A length of 0 indicates the local system.  In this case,
              access to the objects indicated by mteTriggerValueID is under
              the security credentials of the requester that set
              mteTriggerEntryStatus to 'active'.  Those credentials are the
              input parameters for isAccessAllowed from the Architecture for
              Describing SNMP Management Frameworks.
              
              Otherwise access rights are checked according to the security
              
              
              parameters resulting from the tag.
          </description>

        </column>
        <column name="mteTriggerContextName" oid="1.3.6.1.2.1.88.1.2.2.1.9" status="current">
          <syntax>
            <type module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>
          </syntax>
          <access>readwrite</access>
          <default>""</default>
          <description>

              The management context from which to obtain mteTriggerValueID.
              
              This may be wildcarded by leaving characters off the end.  For
              example use 'Repeater' to wildcard to 'Repeater1',
              'Repeater2', 'Repeater-999.87b', and so on.  To indicate such
              wildcarding is intended, mteTriggerContextNameWildcard must
              be 'true'.
              
              Each instance that fills the wildcard is independent of any
              additional instances, that is, wildcarded objects operate
              as if there were a separate table entry for each instance
              that fills the wildcard without having to actually predict
              all possible instances ahead of time.
              
              Operation of this feature assumes that the local system has a
              list of available contexts against which to apply the
              wildcard.  If the objects are being read from the local
              system, this is clearly the system's own list of contexts.
              For a remote system a local version of such a list is not
              defined by any current standard and may not be available, so
              this function MAY not be supported.
          </description>
        </column>
        <column name="mteTriggerContextNameWildcard" oid="1.3.6.1.2.1.88.1.2.2.1.10" status="current">
          <syntax>
            <type module="SNMPv2-TC" name="TruthValue"/>
          </syntax>
          <access>readwrite</access>
          <default>false</default>

          <description>
              Control for whether mteTriggerContextName is to be treated as
              fully-specified or wildcarded, with 'true' indicating wildcard.
          </description>
        </column>
        <column name="mteTriggerFrequency" oid="1.3.6.1.2.1.88.1.2.2.1.11" status="current">
          <syntax>
            <type module="" name="Unsigned32"/>
          </syntax>
          <access>readwrite</access>

          <default>600</default>
          <units>seconds</units>
          <description>
              The number of seconds to wait between trigger samples.  To
              encourage consistency in sampling, the interval is measured
              from the beginning of one check to the beginning of the next
              and the timer is restarted immediately when it expires, not
              when the check completes.
              
              If the next sample begins before the previous one completed the
              system may either attempt to make the check or treat this as an
              error condition with the error 'sampleOverrun'.
              
              A frequency of 0 indicates instantaneous recognition of the
              condition.  This is not possible in many cases, but may
              be supported in cases where it makes sense and the system is
              able to do so.  This feature allows the MIB to be used in
              implementations where such interrupt-driven behavior is
              possible and is not likely to be supported for all MIB objects
              even then since such sampling generally has to be tightly
              integrated into low-level code.
              
              Systems that can support this SHOULD document those cases
              where it can be used.  In cases where it can not, setting this
              object to 0 should be disallowed.
          </description>
        </column>
        <column name="mteTriggerObjectsOwner" oid="1.3.6.1.2.1.88.1.2.2.1.12" status="current">
          <syntax>

            <typedef basetype="OctetString">
              <parent module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>
              <range min="0" max="32"/>
            </typedef>
          </syntax>
          <access>readwrite</access>
          <default>""</default>
          <description>

              To go with mteTriggerObjects, the mteOwner of a group of
              objects from mteObjectsTable.
          </description>
        </column>
        <column name="mteTriggerObjects" oid="1.3.6.1.2.1.88.1.2.2.1.13" status="current">
          <syntax>
            <typedef basetype="OctetString">
              <parent module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>
              <range min="0" max="32"/>
            </typedef>

          </syntax>
          <access>readwrite</access>
          <default>""</default>
          <description>
              The mteObjectsName of a group of objects from
              mteObjectsTable.  These objects are to be added to any
              Notification resulting from the firing of this trigger.
              
              A list of objects may also be added based on the event or on
              the value of mteTriggerTest.
              
              
              
              A length of 0 indicates no additional objects.
          </description>
        </column>
        <column name="mteTriggerEnabled" oid="1.3.6.1.2.1.88.1.2.2.1.14" status="current">

          <syntax>
            <type module="SNMPv2-TC" name="TruthValue"/>
          </syntax>
          <access>readwrite</access>
          <default>false</default>
          <description>
              A control to allow a trigger to be configured but not used.
              When the value is 'false' the trigger is not sampled.
          </description>

        </column>
        <column name="mteTriggerEntryStatus" oid="1.3.6.1.2.1.88.1.2.2.1.15" status="current">
          <syntax>
            <type module="SNMPv2-TC" name="RowStatus"/>
          </syntax>
          <access>readwrite</access>
          <description>
              The control that allows creation and deletion of entries.
              Once made active an entry may not be modified except to
              delete it.
          </description>

        </column>
      </row>
    </table>
    <table name="mteTriggerDeltaTable" oid="1.3.6.1.2.1.88.1.2.3" status="current">
      <description>
          A table of management event trigger information for delta
          sampling.
      </description>
      <row name="mteTriggerDeltaEntry" oid="1.3.6.1.2.1.88.1.2.3.1" status="current">
        <linkage implied="true">

          <index module="DISMAN-EVENT-MIB" name="mteOwner"/>
          <index module="DISMAN-EVENT-MIB" name="mteTriggerName"/>
        </linkage>
        <description>
            Information about a single trigger's delta sampling.  Entries
            automatically exist in this this table for each mteTriggerEntry
            that has mteTriggerSampleType set to 'deltaValue'.
        </description>
        <column name="mteTriggerDeltaDiscontinuityID" oid="1.3.6.1.2.1.88.1.2.3.1.1" status="current">
          <syntax>
            <type module="" name="ObjectIdentifier"/>

          </syntax>
          <access>readwrite</access>
          <default>1.3.6.1.2.1.1.3.0</default>
          <description>
              The OBJECT IDENTIFIER (OID) of a TimeTicks, TimeStamp, or
              DateAndTime object that indicates a discontinuity in the value
              at mteTriggerValueID.
              
              The OID may be for a leaf object (e.g. sysUpTime.0) or may
              be wildcarded to match mteTriggerValueID.
              
              This object supports normal checking for a discontinuity in a
              counter.  Note that if this object does not point to sysUpTime
              discontinuity checking MUST still check sysUpTime for an overall
              discontinuity.
              
              If the object identified is not accessible the sample attempt
              is in error, with the error code as from an SNMP request.
              
              Bad object identifiers or a mismatch between truncating the
              identifier and the value of mteDeltaDiscontinuityIDWildcard
              result in operation as one would expect when providing the
              wrong identifier to a Get operation.  The Get will fail or get
              the wrong object.  If the value syntax of those objects is not
              usable, that results in an error that terminates the sample
              with a 'badType' error code.
          </description>
        </column>
        <column name="mteTriggerDeltaDiscontinuityIDWildcard" oid="1.3.6.1.2.1.88.1.2.3.1.2" status="current">

          <syntax>
            <type module="SNMPv2-TC" name="TruthValue"/>
          </syntax>
          <access>readwrite</access>
          <default>false</default>
          <description>
              Control for whether mteTriggerDeltaDiscontinuityID is to be
              treated as fully-specified or wildcarded, with 'true'
              indicating wildcard. Note that the value of this object will
              be the same as that of the corresponding instance of
              mteTriggerValueIDWildcard when the corresponding
              
              
              mteTriggerSampleType is 'deltaValue'.
          </description>

        </column>
        <column name="mteTriggerDeltaDiscontinuityIDType" oid="1.3.6.1.2.1.88.1.2.3.1.3" status="current">
          <syntax>
            <typedef basetype="Enumeration">
              <namednumber name="timeTicks" number="1"/>
              <namednumber name="timeStamp" number="2"/>
              <namednumber name="dateAndTime" number="3"/>
            </typedef>
          </syntax>

          <access>readwrite</access>
          <default>timeTicks</default>
          <description>
              The value 'timeTicks' indicates the
              mteTriggerDeltaDiscontinuityID of this row is of syntax
              TimeTicks.  The value 'timeStamp' indicates syntax TimeStamp.
              The value 'dateAndTime' indicates syntax DateAndTime.
          </description>
        </column>
      </row>
    </table>

    <table name="mteTriggerExistenceTable" oid="1.3.6.1.2.1.88.1.2.4" status="current">
      <description>
          A table of management event trigger information for existence
          triggers.
      </description>
      <row name="mteTriggerExistenceEntry" oid="1.3.6.1.2.1.88.1.2.4.1" status="current">
        <linkage implied="true">
          <index module="DISMAN-EVENT-MIB" name="mteOwner"/>
          <index module="DISMAN-EVENT-MIB" name="mteTriggerName"/>
        </linkage>

        <description>
            Information about a single existence trigger.  Entries
            automatically exist in this this table for each mteTriggerEntry
            that has 'existence' set in mteTriggerTest.
        </description>
        <column name="mteTriggerExistenceTest" oid="1.3.6.1.2.1.88.1.2.4.1.1" status="current">
          <syntax>
            <typedef basetype="Bits">
              <namednumber name="present" number="0"/>
              <namednumber name="absent" number="1"/>
              <namednumber name="changed" number="2"/>

            </typedef>
          </syntax>
          <access>readwrite</access>
          <default>(present, absent)</default>
          <description>
              The type of existence test to perform.  The trigger fires
              when the object at mteTriggerValueID is seen to go from
              present to absent, from absent to present, or to have it's
              value changed, depending on which tests are selected:
              
              present(0) - when this test is selected, the trigger fires
              when the mteTriggerValueID object goes from absent to present.
              
              absent(1)  - when this test is selected, the trigger fires
              when the mteTriggerValueID object goes from present to absent.
              changed(2) - when this test is selected, the trigger fires
              the mteTriggerValueID object value changes.
              
              Once the trigger has fired for either presence or absence it
              will not fire again for that state until the object has been
              to the other state. 
          </description>
        </column>

        <column name="mteTriggerExistenceStartup" oid="1.3.6.1.2.1.88.1.2.4.1.2" status="current">
          <syntax>
            <typedef basetype="Bits">
              <namednumber name="present" number="0"/>
              <namednumber name="absent" number="1"/>
            </typedef>
          </syntax>
          <access>readwrite</access>

          <default>(present, absent)</default>
          <description>
              Control for whether an event may be triggered when this entry
              is first set to 'active' and the test specified by
              mteTriggerExistenceTest is true.  Setting an option causes
              that trigger to fire when its test is true.
          </description>
        </column>
        <column name="mteTriggerExistenceObjectsOwner" oid="1.3.6.1.2.1.88.1.2.4.1.3" status="current">
          <syntax>
            <typedef basetype="OctetString">
              <parent module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>

              <range min="0" max="32"/>
            </typedef>
          </syntax>
          <access>readwrite</access>
          <default>""</default>
          <description>
              To go with mteTriggerExistenceObjects, the mteOwner of a
              group of objects from mteObjectsTable.
          </description>

        </column>
        <column name="mteTriggerExistenceObjects" oid="1.3.6.1.2.1.88.1.2.4.1.4" status="current">
          <syntax>
            <typedef basetype="OctetString">
              <parent module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>
              <range min="0" max="32"/>
            </typedef>
          </syntax>
          <access>readwrite</access>

          <default>""</default>
          <description>
              The mteObjectsName of a group of objects from
              mteObjectsTable.  These objects are to be added to any
              Notification resulting from the firing of this trigger for
              this test.
              
              A list of objects may also be added based on the overall
              trigger, the event or other settings in mteTriggerTest.
              
              A length of 0 indicates no additional objects.
          </description>
        </column>
        <column name="mteTriggerExistenceEventOwner" oid="1.3.6.1.2.1.88.1.2.4.1.5" status="current">
          <syntax>
            <typedef basetype="OctetString">
              <parent module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>

              <range min="0" max="32"/>
            </typedef>
          </syntax>
          <access>readwrite</access>
          <default>""</default>
          <description>
              To go with mteTriggerExistenceEvent, the mteOwner of an event
              entry from the mteEventTable.
          </description>

        </column>
        <column name="mteTriggerExistenceEvent" oid="1.3.6.1.2.1.88.1.2.4.1.6" status="current">
          <syntax>
            <typedef basetype="OctetString">
              <parent module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>
              <range min="0" max="32"/>
            </typedef>
          </syntax>
          <access>readwrite</access>

          <default>""</default>
          <description>
              The mteEventName of the event to invoke when mteTriggerType is
              'existence' and this trigger fires.  A length of 0 indicates no
              event.
          </description>
        </column>
      </row>
    </table>
    <table name="mteTriggerBooleanTable" oid="1.3.6.1.2.1.88.1.2.5" status="current">
      <description>

          A table of management event trigger information for boolean
          triggers.
      </description>
      <row name="mteTriggerBooleanEntry" oid="1.3.6.1.2.1.88.1.2.5.1" status="current">
        <linkage implied="true">
          <index module="DISMAN-EVENT-MIB" name="mteOwner"/>
          <index module="DISMAN-EVENT-MIB" name="mteTriggerName"/>
        </linkage>
        <description>
            Information about a single boolean trigger.  Entries
            automatically exist in this this table for each mteTriggerEntry
            that has 'boolean' set in mteTriggerTest.
        </description>

        <column name="mteTriggerBooleanComparison" oid="1.3.6.1.2.1.88.1.2.5.1.1" status="current">
          <syntax>
            <typedef basetype="Enumeration">
              <namednumber name="unequal" number="1"/>
              <namednumber name="equal" number="2"/>
              <namednumber name="less" number="3"/>
              <namednumber name="lessOrEqual" number="4"/>
              <namednumber name="greater" number="5"/>
              <namednumber name="greaterOrEqual" number="6"/>

            </typedef>
          </syntax>
          <access>readwrite</access>
          <default>unequal</default>
          <description>
              The type of boolean comparison to perform.
              
              The value at mteTriggerValueID is compared to
              mteTriggerBooleanValue, so for example if
              mteTriggerBooleanComparison is 'less' the result would be true
              if the value at mteTriggerValueID is less than the value of
              mteTriggerBooleanValue.
          </description>
        </column>

        <column name="mteTriggerBooleanValue" oid="1.3.6.1.2.1.88.1.2.5.1.2" status="current">
          <syntax>
            <type module="" name="Integer32"/>
          </syntax>
          <access>readwrite</access>
          <default>0</default>
          <description>
              The value to use for the test specified by
              mteTriggerBooleanTest.
          </description>

        </column>
        <column name="mteTriggerBooleanStartup" oid="1.3.6.1.2.1.88.1.2.5.1.3" status="current">
          <syntax>
            <type module="SNMPv2-TC" name="TruthValue"/>
          </syntax>
          <access>readwrite</access>
          <default>true</default>
          <description>

              Control for whether an event may be triggered when this entry
              is first set to 'active' or a new instance of the object at
              mteTriggerValueID is found and the test specified by
              mteTriggerBooleanComparison is true.  In that case an event is
              triggered if mteTriggerBooleanStartup is 'true'.
          </description>
        </column>
        <column name="mteTriggerBooleanObjectsOwner" oid="1.3.6.1.2.1.88.1.2.5.1.4" status="current">
          <syntax>
            <typedef basetype="OctetString">
              <parent module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>
              <range min="0" max="32"/>
            </typedef>

          </syntax>
          <access>readwrite</access>
          <default>""</default>
          <description>
              To go with mteTriggerBooleanObjects, the mteOwner of a group
              of objects from mteObjectsTable.
          </description>
        </column>
        <column name="mteTriggerBooleanObjects" oid="1.3.6.1.2.1.88.1.2.5.1.5" status="current">

          <syntax>
            <typedef basetype="OctetString">
              <parent module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>
              <range min="0" max="32"/>
            </typedef>
          </syntax>
          <access>readwrite</access>
          <default>""</default>

          <description>
              The mteObjectsName of a group of objects from
              mteObjectsTable.  These objects are to be added to any
              Notification resulting from the firing of this trigger for
              this test.
              
              A list of objects may also be added based on the overall
              trigger, the event or other settings in mteTriggerTest.
              
              A length of 0 indicates no additional objects.
          </description>
        </column>
        <column name="mteTriggerBooleanEventOwner" oid="1.3.6.1.2.1.88.1.2.5.1.6" status="current">
          <syntax>
            <typedef basetype="OctetString">
              <parent module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>
              <range min="0" max="32"/>

            </typedef>
          </syntax>
          <access>readwrite</access>
          <default>""</default>
          <description>
              To go with mteTriggerBooleanEvent, the mteOwner of an event
              entry from mteEventTable.
          </description>
        </column>

        <column name="mteTriggerBooleanEvent" oid="1.3.6.1.2.1.88.1.2.5.1.7" status="current">
          <syntax>
            <typedef basetype="OctetString">
              <parent module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>
              <range min="0" max="32"/>
            </typedef>
          </syntax>
          <access>readwrite</access>

          <default>""</default>
          <description>
              The mteEventName of the event to invoke when mteTriggerType is
              'boolean' and this trigger fires.  A length of 0 indicates no
              event.
          </description>
        </column>
      </row>
    </table>
    <table name="mteTriggerThresholdTable" oid="1.3.6.1.2.1.88.1.2.6" status="current">
      <description>

          A table of management event trigger information for threshold
          triggers.
      </description>
      <row name="mteTriggerThresholdEntry" oid="1.3.6.1.2.1.88.1.2.6.1" status="current">
        <linkage implied="true">
          <index module="DISMAN-EVENT-MIB" name="mteOwner"/>
          <index module="DISMAN-EVENT-MIB" name="mteTriggerName"/>
        </linkage>
        <description>
            Information about a single threshold trigger.  Entries
            automatically exist in this table for each mteTriggerEntry
            that has 'threshold' set in mteTriggerTest.
        </description>

        <column name="mteTriggerThresholdStartup" oid="1.3.6.1.2.1.88.1.2.6.1.1" status="current">
          <syntax>
            <typedef basetype="Enumeration">
              <namednumber name="rising" number="1"/>
              <namednumber name="falling" number="2"/>
              <namednumber name="risingOrFalling" number="3"/>
            </typedef>
          </syntax>
          <access>readwrite</access>

          <default>risingOrFalling</default>
          <description>
              The event that may be triggered when this entry is first
              set to 'active' and a new instance of the object at
              mteTriggerValueID is found.  If the first sample after this
              instance becomes active is greater than or equal to
              mteTriggerThresholdRising and mteTriggerThresholdStartup is
              equal to 'rising' or 'risingOrFalling', then one
              mteTriggerThresholdRisingEvent is triggered for that instance.
              If the first sample after this entry becomes active is less
              than or equal to mteTriggerThresholdFalling and
              mteTriggerThresholdStartup is equal to 'falling' or
              'risingOrFalling', then one mteTriggerThresholdRisingEvent is
              triggered for that instance.
          </description>
        </column>
        <column name="mteTriggerThresholdRising" oid="1.3.6.1.2.1.88.1.2.6.1.2" status="current">
          <syntax>
            <type module="" name="Integer32"/>
          </syntax>

          <access>readwrite</access>
          <default>0</default>
          <description>
              A threshold value to check against if mteTriggerType is
              'threshold'.
              
              When the current sampled value is greater than or equal to
              this threshold, and the value at the last sampling interval
              was less than this threshold, one
              mteTriggerThresholdRisingEvent is triggered.  That event is
              also triggered if the first sample after this entry becomes
              active is greater than or equal to this threshold and
              mteTriggerThresholdStartup is equal to 'rising' or
              'risingOrFalling'.
              
              After a rising event is generated, another such event is not
              triggered until the sampled value falls below this threshold
              and reaches mteTriggerThresholdFalling.
          </description>
        </column>
        <column name="mteTriggerThresholdFalling" oid="1.3.6.1.2.1.88.1.2.6.1.3" status="current">
          <syntax>

            <type module="" name="Integer32"/>
          </syntax>
          <access>readwrite</access>
          <default>0</default>
          <description>
              A threshold value to check against if mteTriggerType is
              'threshold'.
              
              When the current sampled value is less than or equal to this
              threshold, and the value at the last sampling interval was
              greater than this threshold, one
              mteTriggerThresholdFallingEvent is triggered.  That event is
              also triggered if the first sample after this entry becomes
              active is less than or equal to this threshold and
              mteTriggerThresholdStartup is equal to 'falling' or
              'risingOrFalling'.
              
              After a falling event is generated, another such event is not
              triggered until the sampled value rises above this threshold
              and reaches mteTriggerThresholdRising.
          </description>
        </column>

        <column name="mteTriggerThresholdDeltaRising" oid="1.3.6.1.2.1.88.1.2.6.1.4" status="current">
          <syntax>
            <type module="" name="Integer32"/>
          </syntax>
          <access>readwrite</access>
          <default>0</default>
          <description>
              A threshold value to check against if mteTriggerType is
              'threshold'.
              
              When the delta value (difference) between the current sampled
              value (value(n)) and the previous sampled value (value(n-1))
              is greater than or equal to this threshold,
              and the delta value calculated at the last sampling interval
              (i.e. value(n-1) - value(n-2)) was less than this threshold,
              one mteTriggerThresholdDeltaRisingEvent is triggered. That event
              is also triggered if the first delta value calculated after this
              entry becomes active, i.e. value(2) - value(1), where value(1)
              is the first sample taken of that instance, is greater than or
              equal to this threshold.
              
              After a rising event is generated, another such event is not
              triggered until the delta value falls below this threshold and
              reaches mteTriggerThresholdDeltaFalling.
          </description>

        </column>
        <column name="mteTriggerThresholdDeltaFalling" oid="1.3.6.1.2.1.88.1.2.6.1.5" status="current">
          <syntax>
            <type module="" name="Integer32"/>
          </syntax>
          <access>readwrite</access>
          <default>0</default>
          <description>

              A threshold value to check against if mteTriggerType is
              'threshold'.
              
              When the delta value (difference) between the current sampled
              value (value(n)) and the previous sampled value (value(n-1))
              is less than or equal to this threshold,
              and the delta value calculated at the last sampling interval
              (i.e. value(n-1) - value(n-2)) was greater than this threshold,
              one mteTriggerThresholdDeltaFallingEvent is triggered. That event
              is also triggered if the first delta value calculated after this
              entry becomes active, i.e. value(2) - value(1), where value(1)
              is the first sample taken of that instance, is less than or
              equal to this threshold.
              
              After a falling event is generated, another such event is not
              triggered until the delta value falls below this threshold and
              reaches mteTriggerThresholdDeltaRising.
          </description>
        </column>
        <column name="mteTriggerThresholdObjectsOwner" oid="1.3.6.1.2.1.88.1.2.6.1.6" status="current">
          <syntax>
            <typedef basetype="OctetString">
              <parent module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>
              <range min="0" max="32"/>
            </typedef>

          </syntax>
          <access>readwrite</access>
          <default>""</default>
          <description>
              To go with mteTriggerThresholdObjects, the mteOwner of a group
              of objects from mteObjectsTable.
          </description>
        </column>
        <column name="mteTriggerThresholdObjects" oid="1.3.6.1.2.1.88.1.2.6.1.7" status="current">

          <syntax>
            <typedef basetype="OctetString">
              <parent module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>
              <range min="0" max="32"/>
            </typedef>
          </syntax>
          <access>readwrite</access>
          <default>""</default>

          <description>
              The mteObjectsName of a group of objects from
              mteObjectsTable.  These objects are to be added to any
              Notification resulting from the firing of this trigger for
              this test.
              
              A list of objects may also be added based on the overall
              
              
              trigger, the event or other settings in mteTriggerTest.
              
              A length of 0 indicates no additional objects.
          </description>
        </column>
        <column name="mteTriggerThresholdRisingEventOwner" oid="1.3.6.1.2.1.88.1.2.6.1.8" status="current">
          <syntax>
            <typedef basetype="OctetString">
              <parent module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>
              <range min="0" max="32"/>

            </typedef>
          </syntax>
          <access>readwrite</access>
          <default>""</default>
          <description>
              To go with mteTriggerThresholdRisingEvent, the mteOwner of an
              event entry from mteEventTable.
          </description>
        </column>

        <column name="mteTriggerThresholdRisingEvent" oid="1.3.6.1.2.1.88.1.2.6.1.9" status="current">
          <syntax>
            <typedef basetype="OctetString">
              <parent module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>
              <range min="0" max="32"/>
            </typedef>
          </syntax>
          <access>readwrite</access>

          <default>""</default>
          <description>
              The mteEventName of the event to invoke when mteTriggerType is
              'threshold' and this trigger fires based on
              mteTriggerThresholdRising.  A length of 0 indicates no event.
          </description>
        </column>
        <column name="mteTriggerThresholdFallingEventOwner" oid="1.3.6.1.2.1.88.1.2.6.1.10" status="current">
          <syntax>
            <typedef basetype="OctetString">
              <parent module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>

              <range min="0" max="32"/>
            </typedef>
          </syntax>
          <access>readwrite</access>
          <default>""</default>
          <description>
              To go with mteTriggerThresholdFallingEvent, the mteOwner of an
              event entry from mteEventTable.
          </description>

        </column>
        <column name="mteTriggerThresholdFallingEvent" oid="1.3.6.1.2.1.88.1.2.6.1.11" status="current">
          <syntax>
            <typedef basetype="OctetString">
              <parent module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>
              <range min="0" max="32"/>
            </typedef>
          </syntax>
          <access>readwrite</access>

          <default>""</default>
          <description>
              The mteEventName of the event to invoke when mteTriggerType is
              'threshold' and this trigger fires based on
              mteTriggerThresholdFalling.  A length of 0 indicates no event.
          </description>
        </column>
        <column name="mteTriggerThresholdDeltaRisingEventOwner" oid="1.3.6.1.2.1.88.1.2.6.1.12" status="current">
          <syntax>
            <typedef basetype="OctetString">
              <parent module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>

              <range min="0" max="32"/>
            </typedef>
          </syntax>
          <access>readwrite</access>
          <default>""</default>
          <description>
              To go with mteTriggerThresholdDeltaRisingEvent, the mteOwner
              of an event entry from mteEventTable.
          </description>

        </column>
        <column name="mteTriggerThresholdDeltaRisingEvent" oid="1.3.6.1.2.1.88.1.2.6.1.13" status="current">
          <syntax>
            <typedef basetype="OctetString">
              <parent module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>
              <range min="0" max="32"/>
            </typedef>
          </syntax>
          <access>readwrite</access>

          <default>""</default>
          <description>
              The mteEventName of the event to invoke when mteTriggerType is
              'threshold' and this trigger fires based on
              mteTriggerThresholdDeltaRising. A length of 0 indicates
              no event.
          </description>
        </column>
        <column name="mteTriggerThresholdDeltaFallingEventOwner" oid="1.3.6.1.2.1.88.1.2.6.1.14" status="current">
          <syntax>
            <typedef basetype="OctetString">
              <parent module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>

              <range min="0" max="32"/>
            </typedef>
          </syntax>
          <access>readwrite</access>
          <default>""</default>
          <description>
              To go with mteTriggerThresholdDeltaFallingEvent, the mteOwner
              of an event entry from mteEventTable.
          </description>

        </column>
        <column name="mteTriggerThresholdDeltaFallingEvent" oid="1.3.6.1.2.1.88.1.2.6.1.15" status="current">
          <syntax>
            <typedef basetype="OctetString">
              <parent module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>
              <range min="0" max="32"/>
            </typedef>
          </syntax>
          <access>readwrite</access>

          <default>""</default>
          <description>
              The mteEventName of the event to invoke when mteTriggerType is
              'threshold' and this trigger fires based on
              mteTriggerThresholdDeltaFalling.  A length of 0 indicates
              no event.
          </description>
        </column>
      </row>
    </table>
    <node name="mteObjects" oid="1.3.6.1.2.1.88.1.3">
    </node>

    <table name="mteObjectsTable" oid="1.3.6.1.2.1.88.1.3.1" status="current">
      <description>
          A table of objects that can be added to notifications based
          on the trigger, trigger test, or event, as pointed to by
          entries in those tables.
      </description>
      <row name="mteObjectsEntry" oid="1.3.6.1.2.1.88.1.3.1.1" create="true" status="current">
        <linkage>
          <index module="DISMAN-EVENT-MIB" name="mteOwner"/>
          <index module="DISMAN-EVENT-MIB" name="mteObjectsName"/>
          <index module="DISMAN-EVENT-MIB" name="mteObjectsIndex"/>

        </linkage>
        <description>
            A group of objects.  Applications create and delete entries
            using mteObjectsEntryStatus.
            
            When adding objects to a notification they are added in the
            lexical order of their index in this table.  Those associated
            with a trigger come first, then trigger test, then event.
        </description>
        <column name="mteObjectsName" oid="1.3.6.1.2.1.88.1.3.1.1.1" status="current">
          <syntax>
            <typedef basetype="OctetString">
              <parent module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>
              <range min="1" max="32"/>

            </typedef>
          </syntax>
          <access>noaccess</access>
          <description>
              A locally-unique, administratively assigned name for a group
              of objects.
          </description>
        </column>
        <column name="mteObjectsIndex" oid="1.3.6.1.2.1.88.1.3.1.1.2" status="current">
          <syntax>

            <typedef basetype="Unsigned32">
              <range min="1" max="4294967295"/>
            </typedef>
          </syntax>
          <access>noaccess</access>
          <description>
              An arbitrary integer for the purpose of identifying
              individual objects within a mteObjectsName group.
              
              
              Objects within a group are placed in the notification in the
              numerical order of this index.
              
              Groups are placed in the notification in the order of the
              selections for overall trigger, trigger test, and event.
              Within trigger test they are in the same order as the
              numerical values of the bits defined for mteTriggerTest.
              
              Bad object identifiers or a mismatch between truncating the
              identifier and the value of mteDeltaDiscontinuityIDWildcard
              result in operation as one would expect when providing the
              wrong identifier to a Get operation.  The Get will fail or get
              the wrong object.  If the object is not available it is omitted
              from the notification.
          </description>
        </column>

        <column name="mteObjectsID" oid="1.3.6.1.2.1.88.1.3.1.1.3" status="current">
          <syntax>
            <type module="" name="ObjectIdentifier"/>
          </syntax>
          <access>readwrite</access>
          <default>0.0</default>
          <description>
              The object identifier of a MIB object to add to a
              Notification that results from the firing of a trigger.
              
              This may be wildcarded by truncating all or part of the
              instance portion, in which case the instance portion of the
              OID for obtaining this object will be the same as that used
              in obtaining the mteTriggerValueID that fired.  If such
              wildcarding is applied, mteObjectsIDWildcard must be
              'true' and if not it must be 'false'.
              
              Each instance that fills the wildcard is independent of any
              additional instances, that is, wildcarded objects operate
              as if there were a separate table entry for each instance
              that fills the wildcard without having to actually predict
              all possible instances ahead of time.
          </description>

        </column>
        <column name="mteObjectsIDWildcard" oid="1.3.6.1.2.1.88.1.3.1.1.4" status="current">
          <syntax>
            <type module="SNMPv2-TC" name="TruthValue"/>
          </syntax>
          <access>readwrite</access>
          <default>false</default>
          <description>

              Control for whether mteObjectsID is to be treated as
              fully-specified or wildcarded, with 'true' indicating wildcard.
          </description>
        </column>
        <column name="mteObjectsEntryStatus" oid="1.3.6.1.2.1.88.1.3.1.1.5" status="current">
          <syntax>
            <type module="SNMPv2-TC" name="RowStatus"/>
          </syntax>
          <access>readwrite</access>
          <description>

              The control that allows creation and deletion of entries.
              Once made active an entry MAY not be modified except to
              delete it.
          </description>
        </column>
      </row>
    </table>
    <node name="mteEvent" oid="1.3.6.1.2.1.88.1.4">
    </node>
    <scalar name="mteEventFailures" oid="1.3.6.1.2.1.88.1.4.1" status="current">
      <syntax>

        <type module="SNMPv2-SMI" name="Counter32"/>
      </syntax>
      <access>readonly</access>
      <description>
          The number of times an attempt to invoke an event
          has failed.  This counts individually for each
          attempt in a group of targets or each attempt for a
          wildcarded trigger object.
      </description>
    </scalar>
    <table name="mteEventTable" oid="1.3.6.1.2.1.88.1.4.2" status="current">
      <description>

          A table of management event action information.
      </description>
      <row name="mteEventEntry" oid="1.3.6.1.2.1.88.1.4.2.1" create="true" status="current">
        <linkage implied="true">
          <index module="DISMAN-EVENT-MIB" name="mteOwner"/>
          <index module="DISMAN-EVENT-MIB" name="mteEventName"/>
        </linkage>
        <description>
            Information about a single event.  Applications create and
            delete entries using mteEventEntryStatus.
        </description>

        <column name="mteEventName" oid="1.3.6.1.2.1.88.1.4.2.1.1" status="current">
          <syntax>
            <typedef basetype="OctetString">
              <parent module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>
              <range min="1" max="32"/>
            </typedef>
          </syntax>
          <access>noaccess</access>

          <description>
              A locally-unique, administratively assigned name for the
              event.
          </description>
        </column>
        <column name="mteEventComment" oid="1.3.6.1.2.1.88.1.4.2.1.2" status="current">
          <syntax>
            <type module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>
          </syntax>
          <access>readwrite</access>

          <default>""</default>
          <description>
              A description of the event's function and use.
          </description>
        </column>
        <column name="mteEventActions" oid="1.3.6.1.2.1.88.1.4.2.1.3" status="current">
          <syntax>
            <typedef basetype="Bits">
              <namednumber name="notification" number="0"/>

              <namednumber name="set" number="1"/>
            </typedef>
          </syntax>
          <access>readwrite</access>
          <default>()</default>
          <description>
              The actions to perform when this event occurs.
              
              For 'notification', Traps and/or Informs are sent according
              to the configuration in the SNMP Notification MIB.
              
              For 'set', an SNMP Set operation is performed according to
              control values in this entry.
          </description>

        </column>
        <column name="mteEventEnabled" oid="1.3.6.1.2.1.88.1.4.2.1.4" status="current">
          <syntax>
            <type module="SNMPv2-TC" name="TruthValue"/>
          </syntax>
          <access>readwrite</access>
          <default>false</default>
          <description>

              A control to allow an event to be configured but not used.
              When the value is 'false' the event does not execute even if
              
              
              triggered.
          </description>
        </column>
        <column name="mteEventEntryStatus" oid="1.3.6.1.2.1.88.1.4.2.1.5" status="current">
          <syntax>
            <type module="SNMPv2-TC" name="RowStatus"/>
          </syntax>
          <access>readwrite</access>
          <description>

              The control that allows creation and deletion of entries.
              Once made active an entry MAY not be modified except to
              delete it.
          </description>
        </column>
      </row>
    </table>
    <table name="mteEventNotificationTable" oid="1.3.6.1.2.1.88.1.4.3" status="current">
      <description>
          A table of information about notifications to be sent as a
          consequence of management events.
      </description>
      <row name="mteEventNotificationEntry" oid="1.3.6.1.2.1.88.1.4.3.1" status="current">

        <linkage implied="true">
          <index module="DISMAN-EVENT-MIB" name="mteOwner"/>
          <index module="DISMAN-EVENT-MIB" name="mteEventName"/>
        </linkage>
        <description>
            Information about a single event's notification.  Entries
            automatically exist in this this table for each mteEventEntry
            that has 'notification' set in mteEventActions.
        </description>
        <column name="mteEventNotification" oid="1.3.6.1.2.1.88.1.4.3.1.1" status="current">
          <syntax>

            <type module="" name="ObjectIdentifier"/>
          </syntax>
          <access>readwrite</access>
          <default>0.0</default>
          <description>
              The object identifier from the NOTIFICATION-TYPE for the
              notification to use if metEventActions has 'notification' set.
          </description>
        </column>

        <column name="mteEventNotificationObjectsOwner" oid="1.3.6.1.2.1.88.1.4.3.1.2" status="current">
          <syntax>
            <typedef basetype="OctetString">
              <parent module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>
              <range min="0" max="32"/>
            </typedef>
          </syntax>
          <access>readwrite</access>

          <default>""</default>
          <description>
              To go with mteEventNotificationObjects, the mteOwner of a
              group of objects from mteObjectsTable.
          </description>
        </column>
        <column name="mteEventNotificationObjects" oid="1.3.6.1.2.1.88.1.4.3.1.3" status="current">
          <syntax>
            <typedef basetype="OctetString">
              <parent module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>

              <range min="0" max="32"/>
            </typedef>
          </syntax>
          <access>readwrite</access>
          <default>""</default>
          <description>
              The mteObjectsName of a group of objects from
              mteObjectsTable if mteEventActions has 'notification' set.
              These objects are to be added to any Notification generated by
              this event.
              
              Objects may also be added based on the trigger that stimulated
              the event.
              
              A length of 0 indicates no additional objects.
          </description>

        </column>
      </row>
    </table>
    <table name="mteEventSetTable" oid="1.3.6.1.2.1.88.1.4.4" status="current">
      <description>
          A table of management event action information.
      </description>
      <row name="mteEventSetEntry" oid="1.3.6.1.2.1.88.1.4.4.1" status="current">
        <linkage implied="true">

          <index module="DISMAN-EVENT-MIB" name="mteOwner"/>
          <index module="DISMAN-EVENT-MIB" name="mteEventName"/>
        </linkage>
        <description>
            Information about a single event's set option.  Entries
            automatically exist in this this table for each mteEventEntry
            that has 'set' set in mteEventActions.
        </description>
        <column name="mteEventSetObject" oid="1.3.6.1.2.1.88.1.4.4.1.1" status="current">
          <syntax>
            <type module="" name="ObjectIdentifier"/>

          </syntax>
          <access>readwrite</access>
          <default>0.0</default>
          <description>
              The object identifier from the MIB object to set if
              mteEventActions has 'set' set.
              
              This object identifier may be wildcarded by leaving
              sub-identifiers off the end, in which case
              nteEventSetObjectWildCard must be 'true'.
              
              If mteEventSetObject is wildcarded the instance used to set the
              object to which it points is the same as the instance from the
              value of mteTriggerValueID that triggered the event.
              
              Each instance that fills the wildcard is independent of any
              additional instances, that is, wildcarded objects operate
              as if there were a separate table entry for each instance
              that fills the wildcard without having to actually predict
              all possible instances ahead of time.
              
              Bad object identifiers or a mismatch between truncating the
              identifier and the value of mteSetObjectWildcard
              result in operation as one would expect when providing the
              wrong identifier to a Set operation.  The Set will fail or set
              the wrong object.  If the value syntax of the destination
              object is not correct, the Set fails with the normal SNMP
              error code.
          </description>
        </column>
        <column name="mteEventSetObjectWildcard" oid="1.3.6.1.2.1.88.1.4.4.1.2" status="current">

          <syntax>
            <type module="SNMPv2-TC" name="TruthValue"/>
          </syntax>
          <access>readwrite</access>
          <default>false</default>
          <description>
              Control over whether mteEventSetObject is to be treated as
              fully-specified or wildcarded, with 'true' indicating wildcard
              if mteEventActions has 'set' set.
          </description>

        </column>
        <column name="mteEventSetValue" oid="1.3.6.1.2.1.88.1.4.4.1.3" status="current">
          <syntax>
            <type module="" name="Integer32"/>
          </syntax>
          <access>readwrite</access>
          <default>0</default>
          <description>

              The value to which to set the object at mteEventSetObject
              if mteEventActions has 'set' set.
          </description>
        </column>
        <column name="mteEventSetTargetTag" oid="1.3.6.1.2.1.88.1.4.4.1.4" status="current">
          <syntax>
            <type module="SNMP-TARGET-MIB" name="SnmpTagValue"/>
          </syntax>
          <access>readwrite</access>
          <default>""</default>

          <description>
              The tag for the target(s) at which to set the object at
              mteEventSetObject to mteEventSetValue if mteEventActions
              has 'set' set.
              
              Systems limited to self management MAY reject a non-zero
              length for the value of this object.
              
              A length of 0 indicates the local system.  In this case,
              access to the objects indicated by mteEventSetObject is under
              the security credentials of the requester that set
              mteTriggerEntryStatus to 'active'.  Those credentials are the
              input parameters for isAccessAllowed from the Architecture for
              Describing SNMP Management Frameworks.
              
              Otherwise access rights are checked according to the security
              parameters resulting from the tag.
          </description>
        </column>
        <column name="mteEventSetContextName" oid="1.3.6.1.2.1.88.1.4.4.1.5" status="current">
          <syntax>
            <type module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>
          </syntax>
          <access>readwrite</access>

          <default>""</default>
          <description>
              The management context in which to set mteEventObjectID.
              if mteEventActions has 'set' set.
              
              This may be wildcarded by leaving characters off the end.  To
              indicate such wildcarding mteEventSetContextNameWildcard must
              be 'true'.
              
              If this context name is wildcarded the value used to complete
              the wildcarding of mteTriggerContextName will be appended.
          </description>
        </column>
        <column name="mteEventSetContextNameWildcard" oid="1.3.6.1.2.1.88.1.4.4.1.6" status="current">
          <syntax>
            <type module="SNMPv2-TC" name="TruthValue"/>
          </syntax>

          <access>readwrite</access>
          <default>false</default>
          <description>
              Control for whether mteEventSetContextName is to be treated as
              fully-specified or wildcarded, with 'true' indicating wildcard
              if mteEventActions has 'set' set.
          </description>
        </column>
      </row>
    </table>

    <node name="dismanEventMIBNotificationPrefix" oid="1.3.6.1.2.1.88.2">
    </node>
    <node name="dismanEventMIBNotifications" oid="1.3.6.1.2.1.88.2.0">
    </node>
    <node name="dismanEventMIBNotificationObjects" oid="1.3.6.1.2.1.88.2.1">
    </node>
    <scalar name="mteHotTrigger" oid="1.3.6.1.2.1.88.2.1.1" status="current">
      <syntax>
        <type module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>

      </syntax>
      <access>notifyonly</access>
      <description>
          The name of the trigger causing the notification.
      </description>
    </scalar>
    <scalar name="mteHotTargetName" oid="1.3.6.1.2.1.88.2.1.2" status="current">
      <syntax>
        <type module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>

      </syntax>
      <access>notifyonly</access>
      <description>
          The SNMP Target MIB's snmpTargetAddrName related to the
          notification.
      </description>
    </scalar>
    <scalar name="mteHotContextName" oid="1.3.6.1.2.1.88.2.1.3" status="current">
      <syntax>
        <type module="SNMP-FRAMEWORK-MIB" name="SnmpAdminString"/>

      </syntax>
      <access>notifyonly</access>
      <description>
          The context name related to the notification.  This MUST be as
          fully-qualified as possible, including filling in wildcard
          information determined in processing.
      </description>
    </scalar>
    <scalar name="mteHotOID" oid="1.3.6.1.2.1.88.2.1.4" status="current">
      <syntax>
        <type module="" name="ObjectIdentifier"/>

      </syntax>
      <access>notifyonly</access>
      <description>
          The object identifier of the destination object related to the
          notification.  This MUST be as fully-qualified as possible,
          including filling in wildcard information determined in
          processing.
          
          For a trigger-related notification this is from
          mteTriggerValueID.
          
          For a set failure this is from mteEventSetObject.
      </description>
    </scalar>
    <scalar name="mteHotValue" oid="1.3.6.1.2.1.88.2.1.5" status="current">
      <syntax>
        <type module="" name="Integer32"/>

      </syntax>
      <access>notifyonly</access>
      <description>
          The value of the object at mteTriggerValueID when a
          trigger fired.
      </description>
    </scalar>
    <scalar name="mteFailedReason" oid="1.3.6.1.2.1.88.2.1.6" status="current">
      <syntax>
        <type module="DISMAN-EVENT-MIB" name="FailureReason"/>

      </syntax>
      <access>notifyonly</access>
      <description>
          The reason for the failure of an attempt to check for a
          trigger condition or set an object in response to an event.
      </description>
    </scalar>
    <node name="dismanEventMIBConformance" oid="1.3.6.1.2.1.88.3">
    </node>
    <node name="dismanEventMIBCompliances" oid="1.3.6.1.2.1.88.3.1">

    </node>
    <node name="dismanEventMIBGroups" oid="1.3.6.1.2.1.88.3.2">
    </node>
  </nodes>

  <notifications>
    <notification name="mteTriggerFired" oid="1.3.6.1.2.1.88.2.0.1" status="current">
      <objects>
        <object module="DISMAN-EVENT-MIB" name="mteHotTrigger"/>

        <object module="DISMAN-EVENT-MIB" name="mteHotTargetName"/>
        <object module="DISMAN-EVENT-MIB" name="mteHotContextName"/>
        <object module="DISMAN-EVENT-MIB" name="mteHotOID"/>
        <object module="DISMAN-EVENT-MIB" name="mteHotValue"/>
      </objects>
      <description>
          Notification that the trigger indicated by the object
          instances has fired, for triggers with mteTriggerType
          'boolean' or 'existence'.
      </description>
    </notification>

    <notification name="mteTriggerRising" oid="1.3.6.1.2.1.88.2.0.2" status="current">
      <objects>
        <object module="DISMAN-EVENT-MIB" name="mteHotTrigger"/>
        <object module="DISMAN-EVENT-MIB" name="mteHotTargetName"/>
        <object module="DISMAN-EVENT-MIB" name="mteHotContextName"/>
        <object module="DISMAN-EVENT-MIB" name="mteHotOID"/>
        <object module="DISMAN-EVENT-MIB" name="mteHotValue"/>
      </objects>
      <description>

          Notification that the rising threshold was met for triggers
          with mteTriggerType 'threshold'.
      </description>
    </notification>
    <notification name="mteTriggerFalling" oid="1.3.6.1.2.1.88.2.0.3" status="current">
      <objects>
        <object module="DISMAN-EVENT-MIB" name="mteHotTrigger"/>
        <object module="DISMAN-EVENT-MIB" name="mteHotTargetName"/>
        <object module="DISMAN-EVENT-MIB" name="mteHotContextName"/>
        <object module="DISMAN-EVENT-MIB" name="mteHotOID"/>

        <object module="DISMAN-EVENT-MIB" name="mteHotValue"/>
      </objects>
      <description>
          Notification that the falling threshold was met for triggers
          with mteTriggerType 'threshold'.
      </description>
    </notification>
    <notification name="mteTriggerFailure" oid="1.3.6.1.2.1.88.2.0.4" status="current">
      <objects>
        <object module="DISMAN-EVENT-MIB" name="mteHotTrigger"/>

        <object module="DISMAN-EVENT-MIB" name="mteHotTargetName"/>
        <object module="DISMAN-EVENT-MIB" name="mteHotContextName"/>
        <object module="DISMAN-EVENT-MIB" name="mteHotOID"/>
        <object module="DISMAN-EVENT-MIB" name="mteFailedReason"/>
      </objects>
      <description>
          Notification that an attempt to check a trigger has failed.
          
          The network manager must enable this notification only with
          a certain fear and trembling, as it can easily crowd out more
          important information.  It should be used only to help diagnose
          a problem that has appeared in the error counters and can not
          be found otherwise.
      </description>
    </notification>

    <notification name="mteEventSetFailure" oid="1.3.6.1.2.1.88.2.0.5" status="current">
      <objects>
        <object module="DISMAN-EVENT-MIB" name="mteHotTrigger"/>
        <object module="DISMAN-EVENT-MIB" name="mteHotTargetName"/>
        <object module="DISMAN-EVENT-MIB" name="mteHotContextName"/>
        <object module="DISMAN-EVENT-MIB" name="mteHotOID"/>
        <object module="DISMAN-EVENT-MIB" name="mteFailedReason"/>
      </objects>
      <description>

          Notification that an attempt to do a set in response to an
          event has failed.
          
          The network manager must enable this notification only with
          a certain fear and trembling, as it can easily crowd out more
          important information.  It should be used only to help diagnose
          a problem that has appeared in the error counters and can not
          be found otherwise.
      </description>
    </notification>
  </notifications>

  <groups>
    <group name="dismanEventResourceGroup" oid="1.3.6.1.2.1.88.3.2.1" status="current">
      <members>
        <member module="DISMAN-EVENT-MIB" name="mteResourceSampleMinimum"/>
        <member module="DISMAN-EVENT-MIB" name="mteResourceSampleInstanceMaximum"/>

        <member module="DISMAN-EVENT-MIB" name="mteResourceSampleInstances"/>
        <member module="DISMAN-EVENT-MIB" name="mteResourceSampleInstancesHigh"/>
        <member module="DISMAN-EVENT-MIB" name="mteResourceSampleInstanceLacks"/>
      </members>
      <description>
          Event resource status and control objects.
      </description>
    </group>
    <group name="dismanEventTriggerGroup" oid="1.3.6.1.2.1.88.3.2.2" status="current">

      <members>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerFailures"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerComment"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerTest"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerSampleType"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerValueID"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerValueIDWildcard"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerTargetTag"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerContextName"/>

        <member module="DISMAN-EVENT-MIB" name="mteTriggerContextNameWildcard"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerFrequency"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerObjectsOwner"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerObjects"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerEnabled"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerEntryStatus"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerDeltaDiscontinuityID"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerDeltaDiscontinuityIDWildcard"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerDeltaDiscontinuityIDType"/>

        <member module="DISMAN-EVENT-MIB" name="mteTriggerExistenceTest"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerExistenceStartup"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerExistenceObjectsOwner"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerExistenceObjects"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerExistenceEventOwner"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerExistenceEvent"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerBooleanComparison"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerBooleanValue"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerBooleanStartup"/>

        <member module="DISMAN-EVENT-MIB" name="mteTriggerBooleanObjectsOwner"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerBooleanObjects"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerBooleanEventOwner"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerBooleanEvent"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerThresholdStartup"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerThresholdObjectsOwner"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerThresholdObjects"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerThresholdRising"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerThresholdFalling"/>

        <member module="DISMAN-EVENT-MIB" name="mteTriggerThresholdDeltaRising"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerThresholdDeltaFalling"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerThresholdRisingEventOwner"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerThresholdRisingEvent"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerThresholdFallingEventOwner"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerThresholdFallingEvent"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerThresholdDeltaRisingEventOwner"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerThresholdDeltaRisingEvent"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerThresholdDeltaFallingEventOwner"/>

        <member module="DISMAN-EVENT-MIB" name="mteTriggerThresholdDeltaFallingEvent"/>
      </members>
      <description>
          Event triggers.
      </description>
    </group>
    <group name="dismanEventObjectsGroup" oid="1.3.6.1.2.1.88.3.2.3" status="current">
      <members>
        <member module="DISMAN-EVENT-MIB" name="mteObjectsID"/>

        <member module="DISMAN-EVENT-MIB" name="mteObjectsIDWildcard"/>
        <member module="DISMAN-EVENT-MIB" name="mteObjectsEntryStatus"/>
      </members>
      <description>
          Supplemental objects.
      </description>
    </group>
    <group name="dismanEventEventGroup" oid="1.3.6.1.2.1.88.3.2.4" status="current">
      <members>

        <member module="DISMAN-EVENT-MIB" name="mteEventFailures"/>
        <member module="DISMAN-EVENT-MIB" name="mteEventComment"/>
        <member module="DISMAN-EVENT-MIB" name="mteEventActions"/>
        <member module="DISMAN-EVENT-MIB" name="mteEventEnabled"/>
        <member module="DISMAN-EVENT-MIB" name="mteEventEntryStatus"/>
        <member module="DISMAN-EVENT-MIB" name="mteEventNotification"/>
        <member module="DISMAN-EVENT-MIB" name="mteEventNotificationObjectsOwner"/>
        <member module="DISMAN-EVENT-MIB" name="mteEventNotificationObjects"/>
        <member module="DISMAN-EVENT-MIB" name="mteEventSetObject"/>

        <member module="DISMAN-EVENT-MIB" name="mteEventSetObjectWildcard"/>
        <member module="DISMAN-EVENT-MIB" name="mteEventSetValue"/>
        <member module="DISMAN-EVENT-MIB" name="mteEventSetTargetTag"/>
        <member module="DISMAN-EVENT-MIB" name="mteEventSetContextName"/>
        <member module="DISMAN-EVENT-MIB" name="mteEventSetContextNameWildcard"/>
      </members>
      <description>
          Events.
      </description>

    </group>
    <group name="dismanEventNotificationObjectGroup" oid="1.3.6.1.2.1.88.3.2.5" status="current">
      <members>
        <member module="DISMAN-EVENT-MIB" name="mteHotTrigger"/>
        <member module="DISMAN-EVENT-MIB" name="mteHotTargetName"/>
        <member module="DISMAN-EVENT-MIB" name="mteHotContextName"/>
        <member module="DISMAN-EVENT-MIB" name="mteHotOID"/>
        <member module="DISMAN-EVENT-MIB" name="mteHotValue"/>
        <member module="DISMAN-EVENT-MIB" name="mteFailedReason"/>

      </members>
      <description>
          Notification objects.
      </description>
    </group>
    <group name="dismanEventNotificationGroup" oid="1.3.6.1.2.1.88.3.2.6" status="current">
      <members>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerFired"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerRising"/>

        <member module="DISMAN-EVENT-MIB" name="mteTriggerFalling"/>
        <member module="DISMAN-EVENT-MIB" name="mteTriggerFailure"/>
        <member module="DISMAN-EVENT-MIB" name="mteEventSetFailure"/>
      </members>
      <description>
          Notifications.
      </description>
    </group>
  </groups>

  <compliances>
    <compliance name="dismanEventMIBCompliance" oid="1.3.6.1.2.1.88.3.1.1" status="current">
      <description>
          The compliance statement for entities which implement
          the Event MIB.
      </description>
      <requires>
        <mandatory module="DISMAN-EVENT-MIB" name="dismanEventResourceGroup"/>
        <mandatory module="DISMAN-EVENT-MIB" name="dismanEventTriggerGroup"/>
        <mandatory module="DISMAN-EVENT-MIB" name="dismanEventObjectsGroup"/>

        <mandatory module="DISMAN-EVENT-MIB" name="dismanEventEventGroup"/>
        <mandatory module="DISMAN-EVENT-MIB" name="dismanEventNotificationObjectGroup"/>
        <mandatory module="DISMAN-EVENT-MIB" name="dismanEventNotificationGroup"/>
      </requires>
      <refinements>
        <refinement module="DISMAN-EVENT-MIB" name="mteTriggerTargetTag">
          <access>readonly</access>
          <description>

              Write access is not required, thus limiting
              monitoring to the local system or pre-configured
              remote systems.
          </description>
        </refinement>
        <refinement module="DISMAN-EVENT-MIB" name="mteEventSetTargetTag">
          <access>readonly</access>
          <description>
              Write access is not required, thus limiting
              setting to the local system or pre-configured
              remote systems.
          </description>
        </refinement>

        <refinement module="DISMAN-EVENT-MIB" name="mteTriggerValueIDWildcard">
          <access>readonly</access>
          <description>
              Write access is not required, thus allowing
              the system not to implement wildcarding.
          </description>
        </refinement>
        <refinement module="DISMAN-EVENT-MIB" name="mteTriggerContextNameWildcard">
          <access>readonly</access>

          <description>
              Write access is not required, thus allowing
              the system not to implement wildcarding.
          </description>
        </refinement>
        <refinement module="DISMAN-EVENT-MIB" name="mteObjectsIDWildcard">
          <access>readonly</access>
          <description>
              Write access is not required, thus allowing
              the system not to implement wildcarding.
          </description>

        </refinement>
        <refinement module="DISMAN-EVENT-MIB" name="mteEventSetContextNameWildcard">
          <access>readonly</access>
          <description>
              Write access is not required, thus allowing
              the system not to implement wildcarding.
          </description>
        </refinement>
      </refinements>

    </compliance>
  </compliances>

</smi>